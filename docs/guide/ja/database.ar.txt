アクティブレコード
=============

Yii DAOが実質的にどんなデータベース関連のタスクでも取り扱うことができるものの、
我々は一般のCRUD（生成、読み出し、変更、削除）オペレーションを実行するSQL記述を書くことで自身の時間の90%を過ごしています。
さらに、SQL文とコードが混ざり合うために、コードを保守することが困難です。
これらの問題を解決するために、我々はアクティブレコードを使うことができます。

アクティブレコード(AR)は、人気があるO/Rマッピング(ORM)テクニックです。
各々のARクラスはアトリビュートがARクラスのプロパティとして描写されるデータベーステーブル(またはビュー)を表します。そして、ARインスタンスはそのテーブルでのカラムを表します。
共通のCRUDオペレーションは、ARメソッドとして実装されます。
その結果、我々はよりオブジェクト指向なやり方でデータにアクセスすることができます。
例えば、我々は`tbl_post`テーブルに新しい行を挿入するために、以下のコードを使用することができます:

~~~
[php]
$post=new Post;
$post->title='sample post';
$post->content='post body content';
$post->save();
~~~
以下に、CRUDオペレーションを実行するために、ARを準備して使う方法を解説します。
次のセクションでデータベースリレーションに対処するためにARを使う方法を示します。
単純化するため、このセクションでは例として以下のデータベーステーブルを使います。
もしMySQLをお使いの場合には以下のSQLにおいて、`AUTOINCREMENT`を`AUTO_INCREMENT`に修正することに注意してください。

~~~
[sql]
CREATE TABLE tbl_post (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	title VARCHAR(128) NOT NULL,
	content TEXT NOT NULL,
	create_time INTEGER NOT NULL
);
~~~

> Note|注意: ARはあらゆるデータベース関連のタスクを解くものではありません。
PHPの中でデータベーステーブルをモデル化し、複雑なSQLを含まないクエリを実行するために、最も使われます。
複雑なシナリオのためにはYii DAOを使うべきです。


DB接続の確立
--------------------------

ARは、DB関連のオペレーションを実行するために、DB接続に依存します。
デフォルトでは`db`アプリケーションコンポーネントは、DB接続として用いられる必要な[CDbConnection]インスタンスを与えると仮定されます。
以下のアプリケーション構成を例として示します：

~~~
[php]
return array(
	'components'=>array(
		'db'=>array(
			'class'=>'system.db.CDbConnection',
			'connectionString'=>'sqlite:path/to/dbfile',
			// パフォーマンスを向上させるために、スキーマキャッシュを有効にできます
			// 'schemaCachingDuration'=>3600,
		),
	),
);
~~~

> Tip|ヒント: アクティブレコードがカラムの情報を決定するためにテーブルのメタデータに頼るので、メタデータを読んで分析する時間かかります。
データベースのスキーマが変わりそうにないならば、[CDbConnection::schemaCachingDuration]プロパティを0よりも大きな値にしてスキーマキャッシングを有効にしたほうがいいでしょう。

ARに対するサポートは、DBMSによって制限されます。現在以下のDBMSがサポートされています:

   - [MySQL 4.1 or later](http://www.mysql.com)
   - [PostgreSQL 7.3 or later](http://www.postgres.com)
   - [SQLite 2 and 3](http://www.sqlite.org)
   - [Microsoft SQL Server 2000 or later](http://www.microsoft.com/sqlserver/)
   - [Oracle](http://www.oracle.com)

`db`以外のアプリケーションコンポーネントを使いたいか、あるいはARを使う複数のデータベースで作業することを望む場合は[CActiveRecord::getDbConnection()]をオーバライドしなければなりません。
[CActiveRecord]クラスは、すべてのARクラスのためのベースクラスです。

> Tip|ヒント: ARで複数のデータベースで作業するには2つの方法があります。
データベースのスキーマが異なるならば、あなたは[getDbConnection()|CActiveRecord::getDbConnection]の異なる実装を行った異なるベースARクラスを作成しても良いでしょう。
あるいは、ダイナミックに静的変数[CActiveRecord::db]を変えることはより良い考えです。

ARクラス定義
-----------------

データベーステーブルにアクセスするために、最初に[CActiveRecord]を継承ことによってARクラスを定義する必要があります。
それぞれのARクラスは一つのデータベーステーブルを表します。
そして、ARインスタンスはそのテーブルでのカラムを表します。
以下の例は、`tbl_post`テーブルを表しているARクラスのために必要な最小のコードを示します。

~~~
[php]
class Post extends CActiveRecord
{
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	public function tableName()
	{
		return 'tbl_post';
	}
}
~~~

> Tip|ヒント: ARクラスは多くの場所でしばしば参照されるため、一つずつインクルードするのではなく、ARクラスを含んでいるディレクトリごと組込むことができます。
例えば、全てのARクラスファイルが`protected/models`の下にあるなら、以下のようにアプリケーションを設定することができます:
> ~~~
> [php]
> return array(
> 	'import'=>array(
> 		'application.models.*',
> 	),
> );
> ~~~

デフォルトでは、ARクラス名はデータベーステーブル名と同じです。
もし異なる場合は[tableName()|CActiveRecord::tableName]メソッドをオーバライドしてください。
[model()|CActiveRecord::model］メソッドはあらゆるARクラス(簡単に説明します)のためにそのように宣言されます。

> Info|情報: [テーブルプレフィクス機能](/doc/guide/database.dao#using-table-prefix)を使うためには
> ARクラスのための[tableName()|CActiveRecord::tableName]メソッドは以下のようにオーバライドする必要
> があります。
> ~~~
> [php]
> public function tableName()
> {
>     return '{{post}}';
> }
> ~~~
> フルに定義されたテーブル名を返す代わりに、プレフィックスを除いたテーブル名を使い、二重波括弧で囲んで返します。

テーブルの行のカラム値は、対応するARクラスインスタンスのプロパティとしてアクセスされます。
例えば、以下のコードは、`タイトル`カラム(アトリビュート)をセットします:

~~~
[php]
$post=new Post;
$post->title='a sample post';
~~~

`Post`クラスでは決して明示的に`title`プロパティを宣言していませんが、それでも上記のコードでそれにアクセスすることができます。
これは、`title`が`tbl_post`テーブルのカラムであり、CActiveRecordがそれをPHPのマジックメソッドである`__get()`の助けを借りて、プロパティとしてアクセスできるようにします。
同様な方法で存在しないカラムにアクセスしようとすると、例外が発生します。

> Info|情報: このガイドでは、すべてのテーブル名やカラム名には小文字を使用します。
これは、DBMSによってケースの扱いが異るからです。例えば、PostgreSQLではデフォルトではカラム名はケースセンシティブです。カラム名が大文字小文字を含んでいる場合には、クエリ条件の中でカラム名を記述するときにはクオートしなければなりません。
小文字のみを用いることでこのような問題を回避することができます。

ARはテーブルのプライマリキーに依存しています。もしテーブルがプライマリキーを持たない場合、対応するクラスにおいて、どのカラムがプライマリキーなのか、`primaryKey()`メソッドを以下のようにオーバライドすることが必要です。

~~~
[php]
public function primaryKey()
{
	return 'id';
	// 複合主キーの場合は、次のような配列を返します
	// return array('pk1', 'pk2');
}
~~~

レコードの作成
---------------

新しい行をデータベーステーブルに挿入するため、対応するARクラスの新しいインスタンスを作り、
テーブルカラムに関連したプロパティをセットし、
挿入を完了するため[save()|CActiveRecord::save]メソッドを呼びます。

~~~
[php]
$post=new Post;
$post->title='sample post';
$post->content='content for the sample post';
$post->create_time=time();
$post->save();
~~~

テーブルのプライマリキーがauto-incrementなら、挿入した後のARインスタンスには最新のプライマリキーが入ります。
上の例では、idプロパティを明示的に変更しなくても、新しく挿入したポストのプライマリキーの値がidプロパティに反映されます。

カラムがテーブルスキーマ中の静的デフォルト値（例えば、文字列、数値）で定められるならば、
インスタンスが生成された後、ARインスタンスの対応するプロパティは自動的にそのような値を持ちます。
このデフォルト値を変える1つの方法は、ARクラスで明示的にプロパティを宣言することです:

~~~
[php]
class Post extends CActiveRecord
{
	public $title='please enter a title';
	......
}

$post=new Post;
echo $post->title;  // 'please enter a title'と表示される
~~~

レコードがデータベースに保存される(挿入か更新のいずれか)前に、アトリビュートには[CDbExpression]タイプの値を割り当てることができます。
例えば、MySQLの`NOW()`関数によって返されるタイムスタンプを保存するために、以下のコードを使用することができます:

~~~
[php]
$post=new Post;
$post->create_time=new CDbExpression('NOW()');
// $post->create_time='NOW()'; は'NOW()'が文字列として扱われるため、
// 動作しません
$post->save();
~~~

> Tip|ヒント: AR が複雑な SQL 文を書くことなく、データベース操作を実行させる際、
しばしば、AR 下でどんな SQL 文が実行されるかを知りたい場合があります。
これは Yii の [ロギング機能](/doc/guide/topics.logging) により実現可能です。
たとえば、アプリケーション初期構成で、[CWebLogRoute] をつけると、実行された SQL 文を各ウェブページの終わりに表示させられます。
アプリケーション初期構成で、[CDbConnection::enableParamLogging] を true に設定すると、
SQL 文と結合したパラメータ値もログされます。


レコードの読み出し
--------------

データをデータベーステーブルから読むためには、`find`メソッドのうちの1つを以下のように呼出します。

~~~
[php]
// 指定された条件を満たす最初の行を見つけます
$post=Post::model()->find($condition,$params);
// 指定されたプライマリキーを持つ行を見つけます
$post=Post::model()->findByPk($postID,$condition,$params);
// 指定されたアトリビュート値を持つ行を見つけます
$post=Post::model()->findByAttributes($attributes,$condition,$params);
// 指定されたSQL文により最初の行を見つけます
$post=Post::model()->findBySql($sql,$params);
~~~
上記において`Post::model()`を用いて`find`メソッドを呼出します。
静的メソッド`model()`が全てのARクラスで必要なことを覚えてください。
メソッドは、オブジェクトコンテキストにおけるクラスレベルメソッド(静的クラスメソッドに類似したもの)にアクセスするために用いられるARインスタンスを返します。

もし`find`メソッドがクエリ条件を満たす行を見つけた場合、`Post`インスタンスが返されます。そのプロパティはテーブルカラムの対応する項目値となります。そのため、普通のオブジェクトのプロパティを読むように、例えば、`echo $post->title;`のように値を読むことができます。

与えられたクエリ条件でデータベースからみつけることができない場合には、`find`メソッドはnullを返します。

`find`を呼び出す際には、クエリ条件を指定するため`$condition`と`$params`を用います。
ここで、`$condition`はSQL文の`WHERE`句を表す文字列であり、`$params`は配列パラメータであり、それらの値は`$condition`のプレースホルダに対応させる必要があります。例えば、


~~~
[php]
// postIDが10である行を見つけます
$post=Post::model()->find('postID=:postID', array(':postID'=>10));
~~~

> Note|注: 上記において、ある種のDBMSでは`postID`カラムを参照するためにエスケープする必要があります。
例えば、もしPostgreSQLを使っている場合は`"postID"=:postID`のように記述する必要があります。
というのはPostgreSQLはデフォルトではカラム名をケースセンシティブで取り扱うからです。

`$condition`はもっと複雑なクエリ条件に使うことができます。`$condition`は文字列ではなく[CDbCriteria]インスタンスを使うことができ、それは`WHERE`句だけでない他の条件を使用することができます。例えば、

~~~
[php]
$criteria=new CDbCriteria;
$criteria->select='title';  // 'title'行のみを選択します
$criteria->condition='postID=:postID';
$criteria->params=array(':postID'=>10);
$post=Post::model()->find($criteria); // $paramsは不要です
~~~

上記に見られるように、[CDbCriteria]をクエリ条件として使用する場合には`$params`パラメータは不要です。というのはそれは[CDbCriteria]中で指定されるからです。

別の方法として、[CDbCriteria]は`find`メソッドに配列を渡します。配列のキーと値はクライテリアの行の名前と値にそれぞれ対応します。上記の例は以下のように書き換えられます。

~~~
[php]
$post=Post::model()->find(array(
	'select'=>'title',
	'condition'=>'postID=:postID',
	'params'=>array(':postID'=>10),
));
~~~

> Info|情報: 指定された値によってクエリ条件をいくつかのカラムにマッチさせるとき、[findByAttributes()|CActiveRecord::findByAttributes]を使用します。
`$attributes`パラメータはカラム名によりインデックスされた値の配列です。
ある種のフレームワークでは、このタスクは`findByNameAndTitle`のようなメソッドをコールすることで達成されます。
このアプローチは魅力的ではありますが、しばしば混乱や衝突、およびカラム名のケースセンシティブの問題を引き起こします。

指定されたクエリ条件が複数の行のデータにマッチした場合は、我々は以下の`findAll`メソッドによりまとめることができます。
それぞれの条件は既に述べた`find`メソッドにより対応されます。

~~~
[php]
// 指定された条件を満たす全ての行を見つけます
$posts=Post::model()->findAll($condition,$params);
// 指定された主キーをもつ全ての行を見つけます
$posts=Post::model()->findAllByPk($postIDs,$condition,$params);
// 指定されたアトリビュート値をもつ全ての行を見つけます
$posts=Post::model()->findAllByAttributes($attributes,$condition,$params);
// 指定されたSQL文を使用して全ての行を見つけます
$posts=Post::model()->findAllBySql($sql,$params);
~~~

もしもクエリ条件に何もマッチしなければ、`findAll`は空の配列を返します。これは`find`と異ります。
もし何も見つけられなかった場合、`find`はnullを返すからです。

`find`と`findAll`が上記で示される違いはあっても、以下のようなメソッドが便宜上用意されています

~~~
[php]
// 指定された条件を満たす行数を取得します
$n=Post::model()->count($condition,$params);
// 指定されたSQL文を使って行数を取得します
$n=Post::model()->countBySql($sql,$params);
// 指定された条件を満たす行が一つでもあるかをチェックします
$exists=Post::model()->exists($condition,$params);
~~~

レコードの更新
---------------

行を取得後、特定のカラムの値を変更し、元のデータベーステーブルに保存することができます。

~~~
[php]
$post=Post::model()->findByPk(10);
$post->title='new post title';
$post->save(); // データベースに変更を保存
~~~

見てきたように、挿入操作と更新操作について、同じメソッド[save()|CActiveRecord::save]を使用します。
もしARインスタンスが`new`演算子によって生成された場合、[save()|CActiveRecord::save]を呼ぶとデータベーステーブルに新しい行が挿入されます。一方もしARインスタンスが何らかの`find`や`findAll`メソッドの結果である場合には、[save()|CActiveRecord::save]を呼ぶと既存の行が更新されます。実際にはARインスタンスが新しいか否かは[CActiveRecord::isNewRecord]を用いて伝えることができます。

いくつかのデータベーステーブルの行を前もってロードすることなしに更新することも可能です。ARは以下のような便利なクラスレベルのメソッドをこの目的のため提供しています。

~~~
[php]
// 指定された条件に一致する行を更新します
Post::model()->updateAll($attributes,$condition,$params);
// 指定された条件と主キーに一致する行を更新します
Post::model()->updateByPk($pk,$attributes,$condition,$params);
// 指定された条件を満たすカウンタカラムを更新します
Post::model()->updateCounters($counters,$condition,$params);
~~~

上記において、`$attributes`はカラム名によってインデックスされたカラムの値の配列です。
$counters`はカラム名によってインデックスされた増加値の配列です。
そして`$condition`と`$params`は以前のサブセクションで示されたものです。

レコードの削除
---------------

ARインスタンスに行が読み出されている場合、この行を削除することができます。

~~~
[php]
$post=Post::model()->findByPk(10); // IDが10という記事が存在すると仮定します
$post->delete(); // その記事をテーブルから削除します
~~~

削除後でもARインスタンスは変更されていないことに注意してください。その一方で対応するデータベーステーブルの行は無くなっています。

以下のクラスレベルのメソッドが、前もってロードすることなしに行を削除するために提供されています。

~~~
[php]
// 指定された条件に一致する行を削除します
Post::model()->deleteAll($condition,$params);
// 指定された条件と主キーに一致する行を削除します
Post::model()->deleteByPk($pk,$condition,$params);
~~~

データ検証
---------------

行が挿入されたり更新される場合には、カラムの値が指定されたルールに適合しているかをチェックする必要があります。
これはカラムの値がエンドユーザによって与えられる場合には特に重要になります。
一般に、クライアント側から来る値を一切信じてはなりません。

ARは[save()|CActiveRecord::save]が呼ばれた場合に自動的にデータ検証を行います。
検証はARクラスの[rules()|CModel::rules]メソッド中で指定されるルールに基いて行われます。
もっと詳しい検証ルールの設定法に関しては[バリデーションルールの宣言](/doc/guide/form.model#declaring-validation-rules)
の章を参照してください。
以下はレコードの格納をする場合の典型的なワークフローです。

~~~
[php]
if($post->save())
{
	// データは有効であり、正常に挿入/更新されます
}
else
{
	// データが無効。エラーメッセージを取得するにはgetErrors()を呼びます
}
~~~

もし、挿入や更新されるべきデータがエンドユーザによってHTMLフォームの中からサブミットされた場合は
対応するARプロパティを割り当てる必要があります。これは以下のように行います。

~~~
[php]
$post->title=$_POST['title'];
$post->content=$_POST['content'];
$post->save();
~~~

もしたくさんのカラムがある場合には、この割当ては非常に長いリストとなってしまいます。
これは[attributes|CActiveRecord::attributes]を利用することで以下に示すように軽減することができます。
より詳細は[アトリビュート割り当ての安全化](/doc/guide/form.model#securing-attribute-assignments)章と[アクションの生成](/doc/guide/form.action)章に見ることができます。

~~~
[php]
// $_POST['Post']はカラムの値の、カラム名でインデックスされた配列とします
$post->attributes=$_POST['Post'];
$post->save();
~~~


レコードの比較
-----------------

テーブルの行のように、ARインスタンスは主キーによってユニークに識別されます。
そのため、2つのARインスタンスを比較することは、それらが同じARクラスに属すると仮定するとき、
単にそれらの主キーを比較するだけです。しかしながらより簡単な方法があり、それは[CActiveRecord::equals()]を呼ぶことです。

> Info|情報: 他のフレームワークのAR実装と異り、YiiはARにおいて複合された主キーをサポートします。
複合された主キーは2つ以上のカラムから構成されます。Yiiでは主キー値は対応する配列として表現されます。
[primaryKey|CActiveRecord::primaryKey]はARインスタンスの主キー値を与えます。


カスタマイゼーション
-------------

[CActiveRecord]クラスが提供するいくつかのメソッドはプレースホルダです。処理の流れに合わせて子クラスでオーバーライドします。

   - [beforeValidate|CModel::beforeValidate]と[afterValidate|CModel::afterValidate]: これらは検証前と検証後に実行されます。

   - [beforeSave|CActiveRecord::beforeSave]と[afterSave|CActiveRecord::afterSave]: これらはARインスタンスの保存前と保存後に実行されます。

   - [beforeDelete|CActiveRecord::beforeDelete]と[afterDelete|CActiveRecord::afterDelete]: これらはARインスタンスの削除前と削除後に実行されます。

   - [afterConstruct|CActiveRecord::afterConstruct]: これは`new`演算子により新なARインスタンスが作成されるたびに実行されます。

   - [[beforeFind|CActiveRecord::beforeFind]: これはARファインダがクエリ(例 `find()`, `findAll()`)を実行する前に実行されます。

   - [afterFind|CActiveRecord::afterFind]: これはクエリの結果によりARインスタンスが作成された後に実行されます。


ARを用いたトランザクション
-------------------------

どのARインスタンスにも[dbConnection|CActiveRecord::dbConnection]という名の[CDbConnection]クラスのインスタンスであるプロパティがあります。
それを用いると以下のコードのように、YiiのDAOにより提供される[トランザクション](/doc/guide/database.dao#using-transactions)機能を使うことができます。

~~~
[php]
$model=Post::model();
$transaction=$model->dbConnection->beginTransaction();
try
{
	// findとsaveは2つのステップなので、他のリクエストにより順番が反転しかねません
	// 従って、一貫性と完全性を確実にするために、トランザクションを使用します
	$post=$model->findByPk(10);
	$post->title='new post title';
	$post->save();
	$transaction->commit();
}
catch(Exception $e)
{
	$transaction->rollback();
}
~~~


名前付きスコープ
------------

> Note|注意: 名前付きスコープの元になる発想は、Ruby on Rails から来ました。

*名前付きスコープ*とは、*名前の付けられた*クエリ基準（クライテリア）のことで、他の名前付きスコープと結合して、アクティブレコードクエリに適用できるものです。

名前付きスコープは主に、名前 - 基準の対として、[CActiveRecord::scopes()] メソッドで宣言されます。
下記コードでは、`Post` モデルクラスで `published` と `recently` の 2 つの名前付きスコープを宣言しています:

~~~
[php]
class Post extends CActiveRecord
{
	......
	public function scopes()
	{
		return array(
			'published'=>array(
				'condition'=>'status=1',
			),
			'recently'=>array(
				'order'=>'create_time DESC',
				'limit'=>5,
			),
		);
	}
}
~~~

それぞれの名前付きスコープは、[CDbCriteria] インスタンスを初期化するのに使用できる
配列として宣言されます。
例えば、`recently` という名前付きスコープは、`order` プロパティを `create_time DESC` に、
`limit` プロパティを 5 に指定します。これは、最新の 5 件の投稿記事を返すクエリ基準として解釈されます。

名前付きスコープは、`find` メソッド呼び出しの修飾句としてとして主に使用されます。
いくつかの名前付きスコープが、連結されて使用されると、より絞り込まれたクエリ結果のセットが返ります。
例えば、最近公開された投稿記事を見つけるために、下記コードを利用できます:

~~~
[php]
$posts=Post::model()->published()->recently()->findAll();
~~~

一般的に、名前付きスコープは `find` メソッド呼び出しの左側に現れなくてはなりません。
それぞれの名前付きスコープがクエリ基準を提供して、それらがすべて、`find` メソッドの呼出しに渡されたクエリ基準も含めて結合されます。
実質的な効果は、クエリにフィルタのリストを加えるのとほぼ同じです。

> Note|注意: 名前付きスコープはクラスレベルのメソッドと共にのみ使用できます。すなわち、メソッドは `ClassName::model()` を使用してコールしなければなりません。


### パラメータ化された名前付きスコープ

名前付きスコープはパラメータ化することが可能です。
例えば、`recently` という名前付きスコープによって指定される投稿数をカスタマイズ出来るようにしたいとします。
その場合、[CActiveRecord::scopes] で名前付きスコープを宣言する代わりに、
その名前付きスコープと同じ名前で、新しいメソッドを定義します:

~~~
[php]
public function recently($limit=5)
{
	$this->getDbCriteria()->mergeWith(array(
		'order'=>'create_time DESC',
		'limit'=>$limit,
	));
	return $this;
}
~~~

こうすると、最近公開された 3 つの投稿記事を検索するために、下記の文を使用できるようになります:

~~~
[php]
$posts=Post::model()->published()->recently(3)->findAll();
~~~

上記でパラメータ 3 を渡さない場合は、デフォルトで最近公開された 5 つの投稿記事が検索されます。

### デフォルトスコープ
モデルクラスに対して、(リレーショナルクエリを含めた)すべてのクエリに適用されるデフォルトのスコープを設定することができます。
例えば、複数の言語で利用できるウェブサイトでは、利用中のユーザが指定した言語のコンテンツだけを表示したいということがありうるでしょう。
サイトコンテンツを取り出すクエリはたくさんあるでしょうから、デフォルトスコープを定義して、この問題を解決することができます。
そのために[CActiveRecord::defaultScope]メソッドを以下のようにオーバーライドします。

~~~
[php]
class Content extends CActiveRecord
{
	public function defaultScope()
	{
		return array(
			'condition'=>"language='".Yii::app()->language."'",
		);
	}
}
~~~

これで、次のようにメソッドを呼ぶことで、自動的に上記で定義されたクエリ基準が使用されます。

~~~
[php]
$contents=Content::model()->findAll();
~~~

> Note|注意: デフォルトスコープと名前付きスコープは `SELECT` クエリにのみ適用されます。`INSERT`、`UPDATE`、`DELETE` クエリに対しては無視されます。

> さらに、デフォルトスコープまたは名前付きスコープを宣言するとき、そのスコープを宣言するメソッドの中では AR クラスを使って DB クエリを作成することが出来ません。

<div class="revision">$Id: database.ar.txt 3318 2011-06-24 21:40:34Z qiang.xue $</div>