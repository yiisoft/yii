パスエイリアスと名前空間
========================

Yiiは広範囲に渡ってパスエイリアスを使用しています。パスエイリアスは、特定の
ディレクトリ、またはファイルパスと関連付けられています。これは、広範囲に
採用されている名前空間のフォーマットに似たドットシンタックスで
指定されています:

~~~
RootAlias.path.to.target
~~~

`RootAlias`の部分は現存するディレクトリへのエイリアスです。


[YiiBase::getPathOfAlias()]を使うことより、エイリアスは対応するパスへ変換されます。
例えば、`system.web.CController`は`yii/framework/web/CController`のように変換されます。

また、[YiiBase::setPathOfAlias()]を用いて、新しいルートパスエイリアスを定義することができます。

ルートエイリアス
----------------

便宜上、Yiiは以下のルートエイリアスをあらかじめ定義しています。

 - `system`: Yiiフレームワークのディレクトリを参照します。
 - `zii`: [Zii library](/doc/guide/extension.use#zii-extensions)ディレクトリを参照します。
 - `application`: アプリケーションの[base directory](/doc/guide/basics.application#application-base-directory)を参照します。
 - `webroot`: [entry script](/doc/guide/basics.entry)ファイルを含むディレクトリを参照します。
 - `ext`: すべてのサードパーティ[extensions](/doc/guide/extension.overview)を含むディレクトリを参照します。

さらに、もしアプリケーションが[modules](/doc/guide/basics.module)を使用している場合は、
それぞれのモジュールは、モジュールIDと同じ名前を持ち、モジュールのベースパスを参照するあらかじめ定義されたルートエイリアスを持ちます。
例えばもしアプリケーションがモジュールIDが`users`であるようなモジュールを使用する場合、`users`という名前のルートエイリアスがあらかじめ定義されます。

クラスのインポート
------------------

エイリアスを使用するにあたり、クラスの定義を含めることは非常に便利です。
例えば、[CController]クラスを含める場合、以下のように呼び出します。

~~~
[php]
Yii::import('system.web.CController');
~~~

[import|YiiBase::import] メソッドはより効率的という点で `include` や
 `require` とは違います。インポートされるクラスの定義は、厳密には、
それが始めて参照されるときまでインクルードされません。同じ名前空間が
何度もインポートされる場合においても、`include_onde` や `require_once`
 よりも断然速いです。

> Tip|ヒント: Yiiフレームワークで定義されたクラスを参照する場合、
インポートやインクルードを行う必要はありません。Yiiの全てのコアクラスは、
あらかじめインポートされています。

###クラスマップを使う

1.1.5版からはYiiコアクラスにも使用されているクラスマッピング機構を、あらかじめユーザクラスをインポート
するために使用可能になりました。
あらかじめインポートされたクラスはYiiアプリケーションのどこでも明示的にインポート／インクルードせずに使用可能です。
この特徴はYiiの上に構築するフレームワークやライブラリにとって最も有用です。

クラスをあらかじめインポートするには、[CWebApplication::run()]が起動されるまえに以下のコードを実行する必要があります。

~~~
[php]
Yii::$classMap=array(
	'ClassName1' => 'path/to/ClassName1.php',
	'ClassName2' => 'path/to/ClassName2.php',
	......
);
~~~

ディレクトリのインポート
------------------------

下記のシンタックスによって、ディレクトリ配下のクラスファイルが、必要な時に
自動的にインクルードされるように、ディレクトリ全体をインポート
する事が出来ます。

~~~
[php]
Yii::import('system.web.*');
~~~

 [import|YiiBase::import]の他にも、エイリアスはクラスを参照する為に、
様々な箇所で使用されます。例えば、もしクラスファイルが予めインクルード
されていない場合でも、クラスに結びついたインスタンスを作成する為に、
エイリアスを[Yii::createComponent()] に渡すことが出来ます。

名前空間
--------

名前空間は、クラス名の論理的なグループを参照する事によって、たとえクラス名が同じでも、
他の名前空間のものとは別に識別する為のものです。
名前空間とパスエイリアスを混同しないで下さい。
パスエイリアスはファイルやディレクトリの名前をつける便利な手法ではありません。それは
名前空間とは無関係です。

> Tip|ヒント: PHP 5.3.0よりも以前のバージョンでは名前空間のサポートが
本質的に無いので、同じ名前のクラスのインスタンスを作成することが
出来ない為、異なる定義を行う必要があります。この理由によって、
全てのYiiフレームワークのクラスは、前置詞として'C'('class'を意味します)
を付随させていて、この事によって、ユーザが定義したクラスと識別が
出来るようになっています。前置詞'C'はYiiフレームワークの使用の為に
リザーブしておき、ユーザ定義によるクラスの前置詞には別の文字列を
使用して下さい。

名前空間化クラス
----------------

名前空間化クラスはグローバルでない名前空間において宣言されるクラスを意味します。
例えば、`application\components\GoogleMap`クラスは`application\components`名前空間で宣言されます。
名前空間化クラスはPHP5.3.0かそれ以上が必要です。

1.1.5版からは名前空間化クラスを明示的に宣言することなしに使用可能になりました。
例えば、`application\components\GoogleMap`の新しいインスタンスを作成する場合に対応するクラスファイルを
明示的にインクルードしなくても良くなりました。これはYiiの自動クラスロード機構を拡張するものです。

名前空間化クラスを自動ロードするためには、名前空間はパスエイリアスと似たような名前付けをされている必要があります。
例えば`application\components\GoogleMap`は`application.components.GoogleMap`としてエイリアスされるファイルに格納される必要があります。


<div class="revision">$Id: basics.namespace.txt 3086 2008-11-06 19:43:44Z qiang.xue $</div>