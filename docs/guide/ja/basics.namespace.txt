パスエイリアスと名前空間
========================

Yiiは広範囲に渡ってパスエイリアスを使用しています。パスエイリアスは、特定の
ディレクトリ、またはファイルパスと関連付けられています。これは、広範囲に
採用されている名前空間のフォーマットに似たドットシンタックスで
指定されています:

~~~
RootAlias.path.to.target
~~~

`RootAlias`の部分は現存するディレクトリへのエイリアスです。


[YiiBase::getPathOfAlias()]を使うことより、エイリアスは対応するパスへ変換されます。
例えば、`system.web.CController`は`yii/framework/web/CController`のように変換されます。

また、[YiiBase::setPathOfAlias()]を用いて、新しいルートパスエイリアスを定義することができます。

ルートエイリアス
----------------

便宜上、Yiiは以下のルートエイリアスをあらかじめ定義しています。

 - `system`: Yiiフレームワークのディレクトリを参照します。
 - `zii`: [Zii library](/doc/guide/extension.use#zii-extensions)ディレクトリを参照します。
 - `application`: アプリケーションの[base directory](/doc/guide/basics.application#application-base-directory)を参照します。
 - `webroot`: [entry script](/doc/guide/basics.entry)ファイルを含むディレクトリを参照します。
 - `ext`: すべてのサードパーティ[extensions](/doc/guide/extension.overview)を含むディレクトリを参照します。

さらに、もしアプリケーションが[modules](/doc/guide/basics.module)を使用している場合は、
それぞれのモジュールは、モジュールIDと同じ名前を持ち、モジュールのベースパスを参照するあらかじめ定義されたルートエイリアスを持ちます。
例えばもしアプリケーションがモジュールIDが`users`であるようなモジュールを使用する場合、`users`という名前のルートエイリアスがあらかじめ定義されます。

クラスのインポート
------------------

エイリアスを使用するにあたり、クラスの定義を含めることは非常に便利です。
例えば、[CController]クラスを含める場合、以下のように呼び出します。

~~~
[php]
Yii::import('system.web.CController');
~~~

[import|YiiBase::import] メソッドはより効率的という点で `include` や
 `require` とは違います。インポートされるクラスの定義は、厳密には、
それが始めて参照されるときまでインクルードされません。同じ名前空間が
何度もインポートされる場合においても、`include_onde` や `require_once`
 よりも断然速いです。

> Tip|ヒント: Yiiフレームワークで定義されたクラスを参照する場合、
インポートやインクルードを行う必要はありません。Yiiの全てのコアクラスは、
あらかじめインポートされています。

###クラスマップを使う

1.1.5版からはYiiコアクラスにも使用されているクラスマッピング機構を、あらかじめユーザクラスをインポート
するために使用可能になりました。
あらかじめインポートされたクラスはYiiアプリケーションのどこでも明示的にインポート／インクルードせずに使用可能です。
この特徴はYiiの上に構築するフレームワークやライブラリにとって最も有用です。

クラスをあらかじめインポートするには、[CWebApplication::run()]が起動されるまえに以下のコードを実行する必要があります。

~~~
[php]
Yii::$classMap=array(
	'ClassName1' => 'path/to/ClassName1.php',
	'ClassName2' => 'path/to/ClassName2.php',
	......
);
~~~

ディレクトリのインポート
------------------------

下記のシンタックスによって、ディレクトリ配下のクラスファイルが、必要な時に
自動的にインクルードされるように、ディレクトリ全体をインポート
する事が出来ます。

~~~
[php]
Yii::import('system.web.*');
~~~

 [import|YiiBase::import]の他にも、エイリアスはクラスを参照する為に、
様々な箇所で使用されます。例えば、もしクラスファイルが予めインクルード
されていない場合でも、クラスに結びついたインスタンスを作成する為に、
エイリアスを[Yii::createComponent()] に渡すことが出来ます。

名前空間
--------

名前空間は、クラス名の論理的なグループを参照する事によって、たとえクラス名が同じでも、
他の名前空間のものとは別のものとして識別する為のものです。
名前空間とパスエイリアスを混同しないで下さい。
パスエイリアスはファイルやディレクトリに名前をつける便利な手法に過ぎません。それは
名前空間とは無関係です。

> Tip|ヒント: PHP 5.3.0よりも以前のバージョンでは名前空間のサポートが
本質的に無いので、同じ名前のクラスのインスタンスを作成することが
出来ない為、異なる定義を行う必要があります。この理由によって、
全てのYiiフレームワークのクラスは、前置詞として'C'('class'を意味します)
を付随させていて、この事によって、ユーザが定義したクラスと識別が
出来るようになっています。前置詞'C'はYiiフレームワークの使用の為に
リザーブしておき、ユーザ定義によるクラスの前置詞には別の文字列を
使用して下さい。

名前空間化クラス
----------------

名前空間化クラスはグローバルでない名前空間において宣言されるクラスを意味します。
例えば、`application\components\GoogleMap`クラスは`application\components`名前空間で宣言されます。
名前空間化クラスはPHP5.3.0かそれ以上が必要です。

バージョン 1.1.5 からは名前空間化クラスを明示的に宣言することなしに使用可能になりました。
例えば、`application\components\GoogleMap`の新しいインスタンスを作成する場合に対応するクラスファイルを
明示的にインクルードしなくても良くなりました。これはYiiの自動クラスロード機構の拡張によって可能になりました。

名前空間化クラスを自動ロードするためには、名前空間はパスエイリアスと同じ方法で名前付けをされている必要があります。
例えば`application\components\GoogleMap`は`application.components.GoogleMap`としてエイリアスされるファイルに格納される必要があります。

従って、例えば、`/var/www/common/mynamespace/` に存在するクラスに対して `\mynamespace` で始まるカスタム名前空間を
使用するためにすべきことは、次のようにパスエイリアスを設定する事だけです。

~~~
[php]
Yii::setPathOfAlias('mynamespace', '/var/www/common/mynamespace/');
~~~


名前空間化コントローラ
----------------------

デフォルトでは、Yii はグローバル名前空間にあるコントローラを使用します。これらのクラスは
`protected/controllers` に配置されています。この挙動を変更するためには、アプリケーションの
`controllerMap` プロパティを設定して下さい。設定を変更する最善の方法は、構成ファイル
(`protected/config/main.php`) を使用することです。

~~~
[php]
// "mynamespace" 名前空間を追加
Yii::setPathOfAlias('mynamespace', '/var/www/common/mynamespace/');

return array(
	'basePath'=>dirname(__FILE__).DIRECTORY_SEPARATOR.'..',
	'name'=>'My Web Application',

	'controllerMap' => array(
		'test' => '\mynamespace\controllers\TestController',
	),
~~~

ユーザーが `controllerMap` に定義されているコントローラのどれかをロードしようとすると
Yii はコントローラをロードする通常の方法をバイパスして、指定されたクラスをロードします。
すなわち、`test` コントローラの場合、Yii は `/var/www/common/mynamespace/controllers/TestController.php` に
配置されている名前空間化クラス `\mynamespace\controllers\TestController` をロードします。

コントローラのコードは正しく名前空間化されていなければならないことに気を付けて下さい。

~~~
[php]
// 名前空間を定義:
namespace mynamespace\controllers;

// クラスは名前空間の下にあるので、グローバル名前空間は
// "\" を使って明示的に参照されなければならない:
class TestController extends \CController
{
	public function actionIndex()
	{
		echo 'これは \mynamespace\controllers の TestController です';
	}
}
~~~

名前空間化モジュール
------------------

時として、モジュール全体を名前空間化することは有益な事です。例えば、
`testmodule` というモジュールを `\mynamespace\modules\testmodule` という
名前空間の下に置いて、`/var/www/common/mynamespace/modules/testmodule` を
指すようにしたい場合、最初に、以下のようなファイル構造を作成する必要があります。

~~~
/var/www/common/mynamespace/modules
  testmodule
    controllers
      DefaultController.php
    views
      default
        index.php
    TestmoduleModule.php
~~~

`index.php` ビューは、通常のモジュールにあるものと同じものです。`TestmoduleModule.php` と
`DefaultController.php` は名前空間化されます。

`TestmoduleModule.php`:

~~~
[php]
// 名前空間を定義:
namespace mynamespace\modules\testmodule;

// クラスは名前空間の下にあるので、グローバル名前空間は
// "\" を使って明示的に参照されなければならない:
class TestmoduleModule extends \CWebModule
{
	// 非グローバルなコントローラの名前空間を設定 (構成ファイルを使って設定してもよい)
	public $controllerNamespace = '\mynamespace\modules\testmodule\controllers';

	// 以下、通常のモジュールのコード
}
~~~

`DefaultController.php`:

~~~
[php]
<?php
// 名前空間を定義:
namespace mynamespace\modules\testmodule\controllers;

// クラスは名前空間の下にあるので、グローバル名前空間は
// "\" を使って明示的に参照されなければならない:
class DefaultController extends \Controller
{
	public function actionIndex()
	{
		$this->render('index');
	}
}
~~~

これで、残っている作業は、このモジュールをアプリケーションに追加することだけです。
最善の方法は、アプリケーション構成ファイル (`protected/config/main.php`) でモジュールの追加を指定することです。

~~~
[php]
// "mynamespace" 名前空間を追加
Yii::setPathOfAlias('mynamespace', '/var/www/common/mynamespace/');

return array(
	'basePath'=>dirname(__FILE__).DIRECTORY_SEPARATOR.'..',
	'name'=>'My Web Application',

	'modules'=>array(
		'testmodule' => array(
			'class' => '\mynamespace\modules\testmodule\TestModuleModule',
		),
	),
~~~

<div class="revision">$Id$</div>