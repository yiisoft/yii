Apache- und Nginx-Konfigurationen
=================================

Apache
------

Yii kann bereits mit einem standardmäßig konfigurierten Apache Webserver
betrieben werden. Die `.htaccess`-Dateien in Yii-Framework- und
Anwendungsverzeichnissen sperren den Zugriff auf vertrauliche Dateien. Um das
Starscript (normalerweise `index.php`) in URLs zu unterdrücken, kann man
`mod_rewrite`-Anweisungen in die `.htaccess`-Datei im Webverzeichnis oder in
die Virtual-Host-Konfiguration einfügen:

~~~
RewriteEngine on

# Zugriff auf sog. dotfiles verhindern (.htaccess, .svn, .git, etc.)
RedirectMatch 403 /\..*$

# Existierende Verzeichnisse oder Dateien direkt ausliefern
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d

# ansonsten zu index.php weiterleiten
RewriteRule . index.php
~~~


Nginx
-----

Man kann Yii auch mit [Nginx](http://wiki.nginx.org/) und PHP mit [FPM
SAPI](http://php.net/install.fpm) verwenden. Hier eine beispielhafte
Host-Konfiguration. Sie legt das Startscript fest und leitet alle Anfragen an
nicht existente Dateien an Yii um. Damit erhält man lesbare URLs.

~~~
server {
    set $host_path "/www/mysite";
    access_log  /www/mysite/log/access.log  main;

    server_name  mysite;
    root   $host_path/htdocs;
    set $yii_bootstrap "index.php";

    charset utf-8;

    location / {
        index  index.html $yii_bootstrap;
        try_files $uri $uri/ /$yii_bootstrap?$args;
    }

    location ~ ^/(protected|framework|themes/\w+/views) {
        deny  all;
    }

    # Vermeidet die verarbeitung von statischen, nicht existenten Dateien
    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
        try_files $uri =404;
    }

    # Leitet PHP Scripts an den FastCGI server unter 127.0.0.1:9000 weiter
    #
    location ~ \.php {
        fastcgi_split_path_info  ^(.+\.php)(.*)$;

        # Yii soll Aufrufe von nicht existierenden PHP-Dateien abfangen
        set $fsn /$yii_bootstrap;
        if (-f $document_root$fastcgi_script_name){
            set $fsn $fastcgi_script_name;
        }

        fastcgi_pass   127.0.0.1:9000;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fsn;

        # PATH_INFO und PATH_TRANSLATED müssen nicht angegeben werden,
        # sind aber in RFC 3875 für CGI definiert:
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  $document_root$fsn;
    }

    # Zugriff auf sog. dotfiles verhindern (.htaccess, .svn, .git, etc.)
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
~~~

Mit dieser Konfiguration kann man dann in der `php.ini` `cgi.fix_pathinfo=0`
setzen, um unnötige `stat()`-Aufrufe des Systems zu vermeiden.

