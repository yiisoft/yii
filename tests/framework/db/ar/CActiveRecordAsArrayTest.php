<?php

Yii::import('system.db.CDbConnection');
Yii::import('system.db.ar.CActiveRecord');

require_once(dirname(__FILE__).'/../data/models.php');

/**
 * These tests compare results generated by normal call of CActiveRecord find*()-methods
 * with the result of find*()-methods in combination with asArray()
 * It is not checked if the result is the correct one expected related to the query criteria.
 *
 * Currently uncovered:
 * - composite pk
 */
class CActiveRecordAsArrayTest extends CTestCase
{
	protected $backupStaticAttributes = true;

	private $_connection;

	protected function setUp()
	{
		if(!extension_loaded('pdo') || !extension_loaded('pdo_sqlite'))
			$this->markTestSkipped('PDO and SQLite extensions are required.');

		$this->_connection=new CDbConnection('sqlite::memory:');
		$this->_connection->active=true;
		$this->_connection->pdoInstance->exec(file_get_contents(dirname(__FILE__).'/../data/sqlite.sql'));
		CActiveRecord::$db=$this->_connection;
	}

	protected function tearDown()
	{
		$this->_connection->active=false;
	}


	/**
	 * asserts that relations have been loaded to array
	 * @param $array
	 * @param array $relations
	 */
	protected function assertNotRelationLoaded($array, $relations=array())
	{
		foreach($relations as $relation)
		{
			$this->assertArrayNotHasKey($relation, $array, 'relation "'.$relation.'" should not have been fetched.');
		}
	}

	/**
	 * asserts equality of attribute array and $model->attributes
	 * @param array $array
	 * @param CActiveRecord $record
	 */
	protected function assertArrayMatchesRecord($array, $record, $scope='record')
	{
		$this->assertTrue(is_array($array), 'result of asArray query has to be an array ('.$scope.'). Found '.gettype($array).(is_object($array)?'('.get_class($array).')':'').' instead.');
		$this->assertTrue($record instanceof CActiveRecord, 'record has to be instanceof CActiveRecord ('.$scope.'). Found '.gettype($record).(is_object($record)?'('.get_class($record).')':'').' instead.');

		// attributes
		foreach($record->attributes as $attribute => $value)
		{
			$this->assertArrayHasKey($attribute, $array, 'attribute "'.$attribute.'" is not present in array ('.$scope.').');
			$this->assertEquals($value, $array[$attribute], 'array value of attribute "'.$attribute.'" does not match record value ('.$scope.').');
		}

		// relations
		foreach($record->relations() as $relationName => $relation)
		{
			if ($record->hasRelated($relationName))
			{
				$this->assertArrayHasKey($relationName, $array, 'relation "'.$relationName.'" should not have been fetched ('.$scope.').');
				if ($relation[0] == CActiveRecord::BELONGS_TO || $relation[0] == CActiveRecord::HAS_ONE)
				{
					if (($record->$relationName)===null)
						$this->assertNull($array[$relationName], 'relation "'.$relationName.'" should be NULL, but is '.gettype($array).' instead ('.$scope.').');
					else
					{
						$this->assertNotNull($array[$relationName], 'relation "'.$relationName.'" should not be NULL ('.$scope.').');
						$this->assertArrayMatchesRecord($array[$relationName], $record->$relationName, $scope.'=>relation "'.$relationName.'"');
					}
				}
				elseif ($relation[0] == CActiveRecord::STAT)
					$this->assertEquals($array[$relationName], $record->$relationName, 'value of stat relation has to be the same on record and array result. ('.$scope.'=>relation "'.$relationName.'")');
				else
					$this->assertAllArraysMatchRecords($record->$relationName, $array[$relationName], $scope.'=>relation "'.$relationName.'"');
			}
			else
				$this->assertArrayNotHasKey($relationName, $array, 'relation "'.$relationName.'" should not have been fetched ('.$scope.').');
		}
	}

	/**
	 * @param CActiveRecord[] $records
	 * @param array $arrays
	 */
	public function assertAllArraysMatchRecords($records, $arrays, $scope='record')
	{
		$this->assertEquals(count($records), count($arrays), 'array count should be equal to record count ('.$scope.').');
		foreach($records as $key => $record) {
			$this->assertArrayHasKey($key, $arrays, 'array result should have same keys as record result ('.$scope.'):');
			$this->assertArrayMatchesRecord($arrays[$key], $record, $scope);
		}
	}


	public function testModel()
	{
		$model=Post::model();
		$this->assertTrue($model instanceof Post);
		$this->assertFalse($model->getAsArray());
		$this->assertTrue($model->asArray()->getAsArray());
		$this->assertFalse($model->asArray(false)->getAsArray());
		$model->asArray();

		$post=new Post;
		$this->assertFalse($post->getAsArray());
	}

	/**
	 * test empty results
	 */
	public function testFindEmptyResults()
	{
		$this->assertFalse(Post::model()->getAsArray());

		// find
		$this->assertNull(Post::model()->asArray()->find('id=6')); // CActiveRecord
		$this->assertNull(Post::model()->asArray()->find(array('condition'=>'t.id=6', 'with'=>'author'))); // CActiveFinder
		$this->assertFalse(Post::model()->getAsArray());
		// findAll
		$this->assertTrue(Post::model()->asArray()->findAll('id=6')===array()); // CActiveRecord
		$this->assertTrue(Post::model()->asArray()->findAll(array('condition'=>'t.id=6', 'with'=>'author'))===array()); // CActiveFinder
		$this->assertFalse(Post::model()->getAsArray());

		// findByAttributes
		$this->assertNull(Post::model()->asArray()->findByAttributes(array('author_id'=>5)));
		$this->assertFalse(Post::model()->getAsArray());
		// findAllByAttributes
		$this->assertTrue(Post::model()->asArray()->findAllByAttributes(array('author_id'=>5))===array());
		$this->assertFalse(Post::model()->getAsArray());

		// findByPk
		$this->assertNull(Post::model()->asArray()->findByPk(array()));
		$this->assertNull(Post::model()->asArray()->findByPk(null));
		$this->assertNull(Post::model()->asArray()->findByPk(6));
		$this->assertFalse(Post::model()->getAsArray());
		// findAllByPk
		$this->assertTrue(Post::model()->asArray()->findAllByPk(array(6,7))===array());
		$this->assertFalse(Post::model()->getAsArray());

		// findBySql
		$this->assertNull(Post::model()->asArray()->findBySql('select * from posts where id=:id',array(':id'=>6)));
		$this->assertFalse(Post::model()->getAsArray());
		// findAllBySql
		$this->assertTrue(Post::model()->asArray()->findAllBySql('select * from posts where id>:id',array(':id'=>6))===array());
		$this->assertFalse(Post::model()->getAsArray());
	}


	/**
	 * @return array a matrix of conditions and ids
	 */
	public function dataFindParams()
	{
		$ids = array(1, 2, 3);
		$params = array(
			array('', array()), // default arguments to find()
			array(array('with'=>array('author','categories','commentCount')), array()), // commentCount is a stat relation
			array(array('with'=>array('author'=>array('with'=>'groups'),'categories')), array()), // groups is a through relation
			array(array('with'=>array('author','categories','commentCount'), 'together'=>true), array()),
			array(array('with'=>array('author'=>array('with'=>'groups'),'categories'=>array('with'=>'postCount')), 'together'=>true), array()),// postCount is a many many stat relation
		);
		$data = array();
		foreach($ids as $id) {
			foreach($params as $param) {
				$data[] = array_merge($param, array($id));
			}
		}
		return $data;
	}

	/**
	 * @return array a matrix of conditions
	 */
	public function dataFindAllParams()
	{
		/** @var CDbCriteria[] $limits */
		$limits = array(
			array('limit'=>3,'offset'=>1),
			array('index'=>'id'),
		);
		/** @var CDbCriteria[] $withs */
		$withs = array(
			array(),
			array('with'=>array('author','categories','commentCount')),  // commentCount is a stat relation
			array('with'=>array('author'=>array('with'=>'groups'),'categories')), // groups is a through relation
			array('with'=>array('author','categories','commentCount'), 'together'=>true),
			array('with'=>array('author'=>array('with'=>'groups'),'categories'), 'together'=>true),
			array('with'=>array('author','categories'=>array('index'=>'id', 'with'=>'postCount'))),// postCount is a many many stat relation
		);

		$data = array(
			array('', array()), // default arguments to find()
			array('id>2', array()),
		);
		foreach($limits as $limit)
		{
			foreach($withs as $with)
			{
				$c = new CDbCriteria($limit);
				$c->mergeWith($with);
				$data[] = array($c, array());
				//$data[serialize($c->toArray())] = array($c, array());
			}
		}
		return $data;
	}

	/**
	 * test find() with various parameters
	 * @dataProvider dataFindParams
	 */
	public function testFind($condition, $params, $id)
	{
		if (is_string($condition))
		{
			$condition .= (($condition=='')?'':' AND ').'t.id=:id';
			$params[':id'] = $id;
		}
		else
		{
			if (isset($condition['condition']))
				$condition['condition'] .= (($condition['condition']=='')?'':' AND ').'t.id=:id';
			else
				$condition['condition'] = 't.id=:id';
			$condition['params'][':id'] = $id;
		}

		$post=Post::model()->find($condition, $params);
		$posta=Post::model()->asArray()->find($condition, $params);

		$this->assertArrayMatchesRecord($posta, $post);

		$this->assertFalse(Post::model()->getAsArray());
	}

	/**
	 * test findAll() with various parameters
	 * @dataProvider dataFindAllParams
	 */
	public function testFindAll($condition, $params)
	{
		$posts=Post::model()->findAll($condition, $params);
		$this->assertGreaterThan(0,count($posts));
		$postsa=Post::model()->asArray()->findAll($condition, $params);

		$this->assertAllArraysMatchRecords($posts, $postsa);

		$this->assertFalse(Post::model()->getAsArray());
	}

	/**
	 * test findByPk() with various parameters
	 * @dataProvider dataFindParams
	 */
	public function testFindByPk($condition, $params, $id)
	{
		$post=Post::model()->findByPk($id, $condition, $params);
		$this->assertEquals($id,$post->id);
		$posta=Post::model()->asArray()->findByPk($id, $condition, $params);

		$this->assertArrayMatchesRecord($posta, $post);

		$this->assertFalse(Post::model()->getAsArray());
	}

	/**
	 * test findAllByPk() with various parameters
	 * @dataProvider dataFindAllParams
	 */
	public function testFindAllByPk($condition, $params)
	{
		if ($condition instanceof CDbCriteria && $condition->offset>=0)
			$condition->offset=0;

		$posts=Post::model()->findAllByPk(4, $condition, $params);
		$this->assertGreaterThan(0,count($posts));
		$postsa=Post::model()->asArray()->findAllByPk(4, $condition, $params);

		$this->assertAllArraysMatchRecords($posts, $postsa);

		$this->assertFalse(Post::model()->getAsArray());

		$posts=Post::model()->findAllByPk(array(4,3,2), $condition, $params);
		$postsa=Post::model()->asArray()->findAllByPk(array(4,3,2), $condition, $params);
		$this->assertGreaterThan(0,count($posts));

		$this->assertAllArraysMatchRecords($posts, $postsa);

		$this->assertFalse(Post::model()->getAsArray());
	}


	/**
	 * test findByAttributes() with various parameters
	 * @dataProvider dataFindParams
	 */
	public function testFindByAttributes($condition, $params, $id)
	{
		$post=Post::model()->findByAttributes(array('author_id'=>$id),array('order'=>'id DESC'), $condition, $params);
		$posta=Post::model()->asArray()->findByAttributes(array('author_id'=>$id),array('order'=>'id DESC'), $condition, $params);

		$this->assertArrayMatchesRecord($posta, $post);

		$this->assertFalse(Post::model()->getAsArray());
	}

	/**
	 * test findAllByAttributes() with various parameters
	 * @dataProvider dataFindAllParams
	 */
	public function testFindAllByAttributes($condition, $params)
	{
		$posts=Post::model()->findAllByAttributes(array('author_id'=>2), $condition, $params);
		$this->assertGreaterThan(0,count($posts));
		$postsa=Post::model()->asArray()->findAllByAttributes(array('author_id'=>2), $condition, $params);

		$this->assertAllArraysMatchRecords($posts, $postsa);

		$this->assertFalse(Post::model()->getAsArray());
	}

	/**
	 * test findBySql() with various parameters
	 * @dataProvider dataFindParams
	 */
	public function testFindBySql($condition, $params, $id)
	{
		if (is_array($condition) || $condition instanceof CDbCriteria)
			Post::model()->getDbCriteria()->mergeWith($condition);

		$this->assertFalse(Post::model()->getAsArray());
		$post=Post::model()->findBySql('select * from posts where id=:id',array(':id'=>$id));

		if (is_array($condition) || $condition instanceof CDbCriteria)
			Post::model()->getDbCriteria()->mergeWith($condition);

		$posta=Post::model()->asArray()->findBySql('select * from posts where id=:id',array(':id'=>$id));

		$this->assertArrayMatchesRecord($posta, $post);

		$this->assertFalse(Post::model()->getAsArray());
	}

	/**
	 * test findAllBySql() with various parameters
	 * @dataProvider dataFindAllParams
	 */
	public function testFindAllBySql($condition, $params)
	{
		if (is_array($condition) || $condition instanceof CDbCriteria)
			Post::model()->getDbCriteria()->mergeWith($condition);

		$posts=Post::model()->findAllBySql('select * from posts where id>:id',array(':id'=>2));
		$this->assertGreaterThan(2,count($posts));

		if (is_array($condition) || $condition instanceof CDbCriteria)
			Post::model()->getDbCriteria()->mergeWith($condition);

		$postsa=Post::model()->asArray()->findAllBySql('select * from posts where id>:id',array(':id'=>2));

		$this->assertAllArraysMatchRecords($posts, $postsa);

		$this->assertFalse(Post::model()->getAsArray());
	}


	public function testRelation()
	{
		$post=Post::model()->findByPk(3);
		$this->assertFalse($post->getAsArray());

		$this->assertArrayMatchesRecord(
			$post->asArray()->author,
			$post->author
		);
		$this->assertFalse($post->getAsArray());

		$this->assertArrayMatchesRecord(
			$post->asArray()->author(array('with'=>'posts')),
			$post->author(array('with'=>'posts'))
		);
		$this->assertFalse($post->getAsArray());

		$this->assertArrayMatchesRecord(
			$post->asArray()->author(array('with'=>'groups')), // groups is a through relation
			$post->author(array('with'=>'groups'))
		);
		$this->assertFalse($post->getAsArray());

		$this->assertArrayMatchesRecord(
			$post->asArray()->author(array('with'=>'posts', 'together'=>true)),
			$post->author(array('with'=>'posts', 'together'=>true))
		);
		$this->assertFalse($post->getAsArray());

		$this->assertArrayMatchesRecord(
			$post->asArray()->author(array('with'=>'groups', 'together'=>true)), // groups is a through relation
			$post->author(array('with'=>'groups', 'together'=>true))
		);
		$this->assertFalse($post->getAsArray());

		$post1=Post::model()->findByPk(1);
		$this->assertFalse($post1->getAsArray());

		$this->assertAllArraysMatchRecords(
			$post1->categories,
			$post1->asArray()->categories
		);
		$this->assertFalse($post1->getAsArray());
		$this->assertGreaterThan(0,count($post1->categories));

		$this->assertAllArraysMatchRecords(
			$post1->categories(array('with'=>'posts')),
			$post1->asArray()->categories(array('with'=>'posts'))
		);
		$this->assertFalse($post1->getAsArray());

		$this->assertAllArraysMatchRecords(
			$post1->categories(array('with'=>'posts', 'together'=>true)),
			$post1->asArray()->categories(array('with'=>'posts', 'together'=>true))
		);
		$this->assertFalse($post1->getAsArray());
	}

	public function testDeepNestedWith()
	{
/*		$post=Post::model()->findByPk(3);
		$this->assertFalse($post->getAsArray());

		$this->assertArrayMatchesRecord(
			$post->asArray()->author(array('with'=>'posts', 'together'=>true)),
			$post->author(array('with'=>'posts', 'together'=>true))
		);

		$this->assertFalse($post->getAsArray());*/
	}
	/**
	 * test empty results
	 */
	public function testRelationEmptyResults()
	{
		$user=User::model()->findByPk(4);
		$this->assertFalse($user->getAsArray());

		$post=Post::model()->findByPk(4);
		$this->assertFalse($post->getAsArray());

		$cat=Category::model()->findByPk(3);
		$this->assertFalse($cat->getAsArray());

		// MANY_MANY
		$this->assertTrue($post->asArray()->categories===array());
		$this->assertFalse($post->getAsArray());
		$this->assertTrue($post->asArray()->categories(array('with'=>'parent'))===array());
		$this->assertFalse($post->getAsArray());

		// HAS_MANY
		$this->assertTrue($user->asArray()->posts===array());
		$this->assertFalse($user->getAsArray());
		$this->assertTrue($user->asArray()->posts(array('with'=>'author'))===array());
		$this->assertFalse($user->getAsArray());

		// HAS_ONE
		$this->assertNull($post->asArray()->firstComment);
		$this->assertFalse($post->getAsArray());
		$this->assertNull($post->asArray()->firstComment(array('with'=>'author')));
		$this->assertFalse($post->getAsArray());

		// BELONGS_TO
		$this->assertNull($cat->asArray()->parent);
		$this->assertFalse($cat->getAsArray());
		$this->assertNull($cat->asArray()->parent(array('with'=>'children')));
		$this->assertFalse($cat->getAsArray());
	}
}